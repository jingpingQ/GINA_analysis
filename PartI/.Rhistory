tmp_names <- tmp[["samples"]]
count_genosamples=c(count_genosamples,tmp_names)
tmp_eta <- tmp[["eta"]]
colnames(tmp_eta) <- tmp_names
tmp_eta[tmp_eta>0.03]=1
tmp_eta[tmp_eta!=1]=0
input <- tmp_eta
beta_sor=c(beta_sor,beta.multi(input,index.family = "sor")$beta.SOR)
all_names <- c(all_names,file_name)
}
names(beta_sor) <- all_names
beta_eta = list()
names(beta_eta)=c("sor")
beta_eta
beta_eta[1] = beta_sor
beta_eta[[1]] = beta_sor
names(beta_eta)=c("sor")
beta_eta
i=1
tmp <- jsonlite::fromJSON(files[i])
file_name <- gsub("\\..*","",files[i])
tmp_names <- tmp[["samples"]]
sample_names <- c(sample_names,tmp_names)
beta_pair_eta=list()
sample_names=c()
tmp <- jsonlite::fromJSON(files[i])
file_name <- gsub("\\..*","",files[i])
tmp_names <- tmp[["samples"]]
sample_names <- c(sample_names,tmp_names)
tmp_eta <- tmp[["eta"]]
colnames(tmp_eta) <- tmp_names
tmp_eta[tmp_eta>0.03]=1
tmp_eta[tmp_eta>0.03]=1
tmp_eta[tmp_eta!=1]=0
input=tmp_eta
betatmp=beta.pair(t(input),index.family = "sorensen")$beta.sor
beta_pair_eta[[i]] <- betatmp
names(beta_pair_eta)[[i]] <- file_name
beta_pair_eta
beta_pair_eta=list()
sample_names=c()
for (i in 1:length(files)) {
tmp <- jsonlite::fromJSON(files[i])
file_name <- gsub("\\..*","",files[i])
tmp_names <- tmp[["samples"]]
sample_names <- c(sample_names,tmp_names)
tmp_eta <- tmp[["eta"]]
colnames(tmp_eta) <- tmp_names
tmp_eta[tmp_eta>0.03]=1
tmp_eta[tmp_eta!=1]=0
input=tmp_eta
betatmp=beta.pair(t(input),index.family = "sorensen")$beta.sor
beta_pair_eta[[i]] <- betatmp
names(beta_pair_eta)[[i]] <- file_name
}
beta_pair_eta
setwd("~/Desktop/PartII")
setwd("~/Desktop/GINA_analysis/PartII")
files <- list.files(pattern = "*.json")
beta_pair_eta=list()
sample_names=c()
for (i in 1:length(files)) {
tmp <- jsonlite::fromJSON(files[i])
file_name <- gsub("\\..*","",files[i])
tmp_names <- tmp[["samples"]]
sample_names <- c(sample_names,tmp_names)
tmp_eta <- tmp[["eta"]]
colnames(tmp_eta) <- tmp_names
tmp_eta[tmp_eta>0.03]=1
tmp_eta[tmp_eta!=1]=0
input=tmp_eta
betatmp=beta.pair(t(input),index.family = "sorensen")$beta.sor
beta_pair_eta[[i]] <- betatmp
names(beta_pair_eta)[[i]] <- file_name
}
rna_dist <- read.csv("rna_34.csv",header = T,row.names = 1)
colnames(rna_dist)[3]="L13B6"
colnames(rna_dist)[4]="L13B9"
colnames(rna_dist)[74]="L67B8Pap"
colnames(rna_dist)[71]="L67B7I"
dist <- rna_dist[759:761,]
dist
View(rna_dist)
View(dist)
dist <- rna_dist[759:761,]
write.csv(dist,file="dist.csv")
dist <- read.csv("dist.csv",header = T,row.names = 1)
View(dist)
intersect(sample_names,colnames(dist))
dist[,colnames(dist)%in% common]
common <-intersect(sample_names,colnames(dist))
colnames(dist)%in% common
sample_names
setwd("~/Desktop/GINA_analysis/PartII")
files <- list.files(pattern = "*.json")
beta_pair_eta=list()
sample_names=c()
for (i in 1:length(files)) {
tmp <- jsonlite::fromJSON(files[i])
file_name <- gsub("\\..*","",files[i])
tmp_names <- tmp[["samples"]]
sample_names <- c(sample_names,tmp_names)
tmp_eta <- tmp[["eta"]]
colnames(tmp_eta) <- tmp_names
tmp_eta[tmp_eta>0.03]=1
tmp_eta[tmp_eta!=1]=0
input=tmp_eta
betatmp=beta.pair(t(input),index.family = "sorensen")$beta.sor
beta_pair_eta[[i]] <- betatmp
names(beta_pair_eta)[[i]] <- file_name
}
sample_names
beta_pair_eta
files
files <- list.files(pattern = "*.json")
beta_pair_eta=list()
sample_names=c()
for (i in 1:length(files)) {
tmp <- jsonlite::fromJSON(files[i])
file_name <- gsub("\\..*","",files[i])
tmp_names <- tmp[["samples"]]
sample_names <- c(sample_names,tmp_names)
tmp_eta <- tmp[["eta"]]
colnames(tmp_eta) <- tmp_names
tmp_eta[tmp_eta>0.03]=1
tmp_eta[tmp_eta!=1]=0
input=tmp_eta
betatmp=beta.pair(t(input),index.family = "sorensen")$beta.sor
beta_pair_eta[[i]] <- betatmp
names(beta_pair_eta)[[i]] <- file_name
}
#read spatial coordinates
dist <- read.csv("dist.csv",header = T,row.names = 1)
dist <- dist[ , apply(dist, 2, function(x) !any(is.na(x)))]
common <-intersect(sample_names,colnames(dist))
colnames(dist)%in% common
colnames(dist)[!colnames(dist)%in% common]
#some of the foci are speculated on pathological level but not sequenced due to lack of tissue
#remove them.
dist <- dist[,colnames(dist)%in% common]
beta_pair_eta=list()
sample_names=c()
#calculate pair-wise beta using eta
beta_pair_eta=list()
sample_names=c()
for (i in 1:length(files)) {
tmp <- jsonlite::fromJSON(files[i])
file_name <- gsub("\\..*","",files[i])
tmp_names <- tmp[["samples"]]
##in common
if(length(tmp_names[tmp_names%in% common])>0){
#remove the one not in list
p=which(!tmp_names%in% common)
}
tmp_names <- tmp_names[tmp_names%in% common]
sample_names <- c(sample_names,tmp_names)
tmp_eta <- tmp[["eta"]]
if(ncol(tmp_eta)!=length(tmp_names)){
tmp_eta=tmp_eta[,-p]
}
colnames(tmp_eta) <- tmp_names
tmp_eta[tmp_eta>0.03]=1
tmp_eta[tmp_eta!=1]=0
#choose your fate
input <- tmp_phi
betatmp=beta.pair(t(input),index.family = "sorensen")$beta.sor
input2=tmp_eta
betatmp2=beta.pair(t(input2),index.family = "sorensen")$beta.sor
beta_pair_phi[[i]] <- betatmp
names(beta_pair_phi)[[i]] <- file_name
beta_pair_eta[[i]] <- betatmp2
names(beta_pair_eta)[[i]] <- file_name
}
for (i in 1:length(files)) {
tmp <- jsonlite::fromJSON(files[i])
file_name <- gsub("\\..*","",files[i])
tmp_names <- tmp[["samples"]]
##in common
if(length(tmp_names[tmp_names%in% common])>0){
#remove the one not in list
p=which(!tmp_names%in% common)
}
tmp_names <- tmp_names[tmp_names%in% common]
sample_names <- c(sample_names,tmp_names)
tmp_eta <- tmp[["eta"]]
if(ncol(tmp_eta)!=length(tmp_names)){
tmp_eta=tmp_eta[,-p]
}
colnames(tmp_eta) <- tmp_names
tmp_eta[tmp_eta>0.03]=1
tmp_eta[tmp_eta!=1]=0
input=tmp_eta
betatmp=beta.pair(t(input),index.family = "sorensen")$beta.sor
beta_pair_eta[[i]] <- betatmp
names(beta_pair_eta)[[i]] <- file_name
}
beta_pair_eta
beta_pair_eta[lapply(beta_pair_eta,length)>0]
for (i in 1:length(files)) {
tmp <- jsonlite::fromJSON(files[i])
file_name <- gsub("\\..*","",files[i])
tmp_names <- tmp[["samples"]]
##in common
if(length(tmp_names[tmp_names%in% common])>0){
#remove the one not in list
p=which(!tmp_names%in% common)
}
tmp_names <- tmp_names[tmp_names%in% common]
sample_names <- c(sample_names,tmp_names)
tmp_eta <- tmp[["eta"]]
if(ncol(tmp_eta)!=length(tmp_names)){
tmp_eta=tmp_eta[,-p]
}
colnames(tmp_eta) <- tmp_names
tmp_eta[tmp_eta>0.03]=1
tmp_eta[tmp_eta!=1]=0
input=tmp_eta
betatmp=beta.pair(t(input),index.family = "sorensen")$beta.sor
beta_pair_eta[[i]] <- betatmp
names(beta_pair_eta)[[i]] <- file_name
}
beta_pair_eta
beta_pair_eta = beta_pair_eta[lapply(beta_pair_eta,length)>0]
beta_pair_eta
library(purrr)
library(reshape)
install.packages("reshape")
unique(gsub("B.*","",colnames(dist)))
#unique(gsub("B.*","",colnames(dist)))
colnames(dist)=paste(gsub("B.*","",colnames(dist)),"_B",gsub(".*B","",colnames(dist)),sep="")
dist_list <-  map(set_names(unique(gsub("B.*","",colnames(dist)))),~dplyr::select(dist,starts_with(.x)))
dist_list <- lapply(dist_list, t)
dist_pair = lapply(dist_list,dist)
dist_pair
dist_pair_melt=list()
for (i in 1:length(dist_pair)) {
dist_tmp = dist_pair[[i]]
dist_melt <- melt(as.matrix(dist_tmp), varnames = c("site1", "site2"))
dist_melt <- dist_melt[!duplicated(dist_melt$value),]
dist_melt <- dist_melt[!dist_melt$value==0,]
colnames(dist_melt)[3] = "dist"
dist_pair_melt[[i]]=dist_melt
names(dist_pair_melt)[[i]] <- names(dist_pair)[[i]]
}
install.packages("wrapr")
library(wrapr)
library(wrapr)
dist_pair_melt=list()
for (i in 1:length(dist_pair)) {
dist_tmp = dist_pair[[i]]
dist_melt <- melt(as.matrix(dist_tmp), varnames = c("site1", "site2"))
dist_melt <- dist_melt[!duplicated(dist_melt$value),]
dist_melt <- dist_melt[!dist_melt$value==0,]
colnames(dist_melt)[3] = "dist"
dist_pair_melt[[i]]=dist_melt
names(dist_pair_melt)[[i]] <- names(dist_pair)[[i]]
}
eta_pair_melt=list()
for (i in 1:length(beta_pair_eta)) {
eta_tmp = beta_pair_eta[[i]]
eta_melt <- melt(as.matrix(eta_tmp), varnames = c("site1", "site2"))
eta_melt <- eta_melt[eta_melt$site1 != eta_melt$site2,]
cols = c(1,2)
newdf = eta_melt[,cols]
tmp_sorted=t(apply(newdf,1,sort))
colnames(tmp_sorted)=c('site1','site2')
eta_melt=eta_melt[!duplicated(tmp_sorted),]
colnames(eta_melt)[3] = "sorensen_eta"
eta_pair_melt[[i]]=eta_melt
names(eta_pair_melt)[[i]] <- names(beta_pair_eta)[[i]]
}
beta_eta_df <- do.call(rbind.data.frame, eta_pair_melt)
gsub("\\_","",names(dist_pair_melt))
dist_pair_melt
dist_pair_melt=list()
for (i in 1:length(dist_pair)) {
dist_tmp = dist_pair[[i]]
dist_melt <- melt(as.matrix(dist_tmp), varnames = c("site1", "site2"))
dist_melt <- dist_melt[!duplicated(dist_melt$value),]
dist_melt <- dist_melt[!dist_melt$value==0,]
colnames(dist_melt)[3] = "dist"
dist_pair_melt[[i]]=dist_melt
names(dist_pair_melt)[[i]] <- names(dist_pair)[[i]]
}
dist_melt <- reshape::melt(as.matrix(dist_tmp), varnames = c("site1", "site2"))
dist_melt
dist_pair_melt=list()
for (i in 1:length(dist_pair)) {
dist_tmp = dist_pair[[i]]
dist_melt <- reshape::melt(as.matrix(dist_tmp), varnames = c("site1", "site2"))
dist_melt <- dist_melt[!duplicated(dist_melt$value),]
dist_melt <- dist_melt[!dist_melt$value==0,]
colnames(dist_melt)[3] = "dist"
dist_pair_melt[[i]]=dist_melt
names(dist_pair_melt)[[i]] <- names(dist_pair)[[i]]
}
dist_pair_melt
dist_pair
i=1
dist_tmp = dist_pair[[i]]
dist_tmp
dist_melt <- reshape::melt(as.matrix(dist_tmp), varnames = c("site1", "site2"))
dist_melt
dist_melt <- dist_melt[!duplicated(dist_melt$value),]
dist_melt <- dist_melt[!dist_melt$value==0,]
#remove the 0 distance when its self-paired
#remove duplicated pairs
dist_melt <- dist_melt[!duplicated(dist_melt$value),]
dist_melt <- dist_melt[!dist_melt$value==0,]
colnames(dist_melt)[3] = "dist"
dist_melt
dist_pair_melt[[i]]=dist_melt
dist_pair
gsub("\_","",names(dist_pair))
gsub("\\_","",names(dist_pair))
names(dist_pair_melt)[[i]] <- gsub("\\_","",names(dist_pair))[[i]]
dist_pair_melt=list()
for (i in 1:length(dist_pair)) {
dist_tmp = dist_pair[[i]]
dist_melt <- reshape::melt(as.matrix(dist_tmp), varnames = c("site1", "site2"))
#remove the 0 distance when its self-paired
#remove duplicated pairs
dist_melt <- dist_melt[!duplicated(dist_melt$value),]
dist_melt <- dist_melt[!dist_melt$value==0,]
colnames(dist_melt)[3] = "dist"
dist_pair_melt[[i]]=dist_melt
names(dist_pair_melt)[[i]] <- gsub("\\_","",names(dist_pair))[[i]]
}
dist_pair_melt
eta_tmp = beta_pair_eta[[i]]
eta_melt <- reshape::melt(as.matrix(eta_tmp), varnames = c("site1", "site2"))
eta_melt <- eta_melt[eta_melt$site1 != eta_melt$site2,]
eta_melt
eta_tmp = beta_pair_eta[[i]]
eta_melt <- reshape::melt(as.matrix(eta_tmp), varnames = c("site1", "site2"))
eta_melt <- eta_melt[eta_melt$site1 != eta_melt$site2,]
eta_melt
cols = c(1,2)
newdf = eta_melt[,cols]
tmp_sorted=t(apply(newdf,1,sort))
colnames(tmp_sorted)=c('site1','site2')
eta_melt=eta_melt[!duplicated(tmp_sorted),]
colnames(eta_melt)[3] = "sorensen_eta"
eta_pair_melt[[i]]=eta_melt
names(beta_pair_eta)[[i]]
names(eta_pair_melt)[[i]] <- names(beta_pair_eta)[[i]]
for (i in 1:length(beta_pair_eta)) {
eta_tmp = beta_pair_eta[[i]]
eta_melt <- reshape::melt(as.matrix(eta_tmp), varnames = c("site1", "site2"))
eta_melt <- eta_melt[eta_melt$site1 != eta_melt$site2,]
cols = c(1,2)
newdf = eta_melt[,cols]
tmp_sorted=t(apply(newdf,1,sort))
colnames(tmp_sorted)=c('site1','site2')
eta_melt=eta_melt[!duplicated(tmp_sorted),]
colnames(eta_melt)[3] = "sorensen_eta"
eta_pair_melt[[i]]=eta_melt
names(eta_pair_melt)[[i]] <- names(beta_pair_eta)[[i]]
}
eta_pair_melt
beta_eta_df <- do.call(rbind.data.frame, eta_pair_melt)
gsub("\\_","",names(dist_pair_melt))
beta_eta_df
for(i in 1:length(dist_pair_melt)){
names(dist_pair_melt)[[i]]=gsub("\\_","",names(dist_pair_melt)[[i]])
tmp=as.data.frame(dist_pair_melt[[i]],stringsAsFactors = F)
tmp$site1=as.character(tmp$site1)
tmp$site2=as.character(tmp$site2)
for(j in 1:nrow(tmp)){
tmp[j,1]<-gsub("\\_","",tmp[j,1])
tmp[j,2]=gsub("\\_","",tmp[j,2])
}
dist_pair_melt[[i]]=tmp
}
dist_df <- do.call(rbind.data.frame, dist_pair_melt)
dist_df
rownames(beta_eta_df) == rownames(dist_df)
dist_df$sor_eta = beta_eta_df$sorensen_eta
cor(dist_df$dist,dist_df$sor_eta)
dist_df$patient= gsub("B.*","",dist_df$site1)
dist_df
cor.test(dist_df$sor_eta,dist_df$dist)
subtype=readxl::read_xlsx("gina_meta",sheet = 1)
install.packages("readxl")
subtype=readxl::read_xlsx("gina_meta",sheet = 1)
subtype=readxl::read_xlsx("gina_meta.xlsx",sheet = 1)
setwd("~/Desktop/GINA_analysis/PartI")
subtype=readxl::read_xlsx("gina_meta.xlsx",sheet = 1)
#get the TN labels
subtype$tn="no"
subtype$tn[subtype$clinical_subtypes=="TN"]="yes"
subtype$linear=subtype$linear_nodes/subtype$all_nodes
subtype$truncality=subtype$trunk1/subtype$all_nodes
test_cor
dist_df$patient
clinical_subtypes=subtype$tn
names(clinical_subtypes)=subtype$patient
clinical_subtypes
clinical_subtypes[dist_df$patient]
dist_df$subtype=clinical_subtypes[dist_df$patient]
dist_df$focality=focality[dist_df$patient]
#store focality and subtype for future use
focality=subtype$focality
names(focality)=subtype$patient
dist_df$focality=focality[dist_df$patient]
#test correlation for focality and subtype
cor.test(dist_df$sor_eta[dist_df$subtype=="BASAL"],dist_df$dist[dist_df$subtype=="BASAL"],method = "spearman")
#test correlation for focality and subtype
cor.test(dist_df$sor_eta[dist_df$subtype=="yes"],dist_df$dist[dist_df$subtype=="no"],method = "spearman")
View(dist_df)
#test correlation for focality and subtype
cor(dist_df$sor_eta[dist_df$subtype=="yes"],dist_df$dist[dist_df$subtype=="yes"],method = "spearman")
shapiro.test(dist_df$sor_eta[dist_df$subtype=="yes"])
shapiro.test(dist_df$sor_eta[dist_df$subtype=="no"])
#test correlation for focality and subtype
cor(dist_df$sor_eta[dist_df$subtype=="yes"],dist_df$dist[dist_df$subtype=="yes"],method = "spearman")
cor(dist_df$sor_eta[dist_df$subtype=="no"],dist_df$dist[dist_df$subtype=="no"],method = "spearman")
write.csv(dist_df,file = "dist.diff.csv")
#spearman shows strong positive correlation (r=0.80) in TN and weak correlation (r=0.11) in non-TN
#adjust by sample size bias in the two groups
fisher_z_transform <- function(correlation) {
return(0.5 * log((1 + correlation) / (1 - correlation)))
}
# Function to compute Fisher Z-transformation
fisher_z_transform <- function(correlation) {
return(0.5 * log((1 + correlation) / (1 - correlation)))
}
# Function to compute the Z-score difference
fisher_z_adjustment <- function(corr1, n1, corr2, n2) {
z1 <- fisher_z_transform(corr1)
z2 <- fisher_z_transform(corr2)
se1 <- 1 / sqrt(n1 - 3)
se2 <- 1 / sqrt(n2 - 3)
z_diff <- (z1 - z2) / sqrt(se1^2 + se2^2)
return(z_diff)
}
length(subset(dist_df, subtype == "no")$dist)
# Example usage with given correlation coefficients and sample sizes
corr_no <- 0.1131  # Spearman correlation for group "non_TN"
n_no <-  length(subset(dist_df, subtype == "no")$dist)  # Sample size for "non_TN"
corr_yes <- 0.7967  # Spearman correlation for group "TN"
n_yes <- length(subset(dist_df, subtype == "yes")$dist)  # Sample size for "TN"
# Compute Fisher Z-score difference
z_score_diff <- fisher_z_adjustment(corr_no, n_no, corr_yes, n_yes)
# Print the result
print(z_score_diff)
#shapiro test for normality
shapiro.test(subtype$linear)
shapiro.test(subtype$truncality)
View(subtype)
t.test(subtype$linear~subtype$clinical_subtypes)
subtype$clinical_subtypes
t.test(subtype$linear~subtype$tn)
t.test(subtype$linear~subtype$tn)$p-value
t.test(subtype$linear~subtype$tn)$p
t.test(subtype$linear~subtype$tn)$p.value
p_linearity=t.test(subtype$linear~subtype$tn)$p.value
p_truncality=wilcox.test(subtype$truncality~subtype$tn)$p.value
p_truncality
#boxplot to see the diff
ggpubr::ggboxplot(subtype,x=subtype, y=linear,
color=subtype)
#boxplot to see the diff
ggpubr::ggboxplot(subtype,x=subtype$tn, y=subtype$linear,
color=subtype)
subtype$tn
subtype$linear
#boxplot to see the diff
ggpubr::ggboxplot(subtype,x=subtype$tn, y=subtype$linear,
color=subtype$tn)
#boxplot to see the diff
ggpubr::ggboxplot(subtype,x="tn", y="linear",
color="tn")
ggpubr::ggboxplot(subtype,x="tn", y="truncality",
color="tn")
mean(subtype$linear[subtype$tn=="no"])
mean(subtype$linear[subtype$tn=="yes"])
t.test(subtype$linear~subtype$tn)
write.csv(subtype,file="subtype.csv")
library(car)
mean(subtype$linear[subtype$tn=="no"])
mean(subtype$linear[subtype$tn=="yes"])
mean(subtype$truncality[subtype$tn=="no"])
mean(subtype$truncality[subtype$tn=="yes"])
p_linearity=t.test(subtype$linear~subtype$tn)$p.value
p_truncality=wilcox.test(subtype$truncality~subtype$tn)$p.value
p_truncality
pval==c(p_truncality,p_linear,p_cor)
pval=c(p_truncality,p_linear,p_cor)
pval=c(p_truncality,p_linearity,p_cor)
#z-score=-2.98, p=0.00291
p_cor=0.00291
pval=c(p_truncality,p_linearity,p_cor)
p.adjust(pval)
#adjust all p
pval=c(p_linearity,p_truncality,p_cor)
p.adjust(pval)
p_linearity
p_truncality
p_cor
pval=c(p_linearity,p_truncality,p_cor)
p.adjust(pval)
#correlating the physical distance and the paired beta, Cor=0.22
shapiro.test(dist_df$dist)
cor(dist_df$dist,dist_df$sor_eta,method="spearman")
dist_df$focality
cor(dist_df$dist[dist_df$focality=="multi"],dist_df$sor_eta[dist_df$focality=="multi"],method="spearman")
cor(dist_df$dist[dist_df$focality=="uni"],dist_df$sor_eta[dist_df$focality=="uni"],method="spearman")
#test correlation for focality and subtype, noticed they are not all normally distributed
#use spearman instead of pearson.
cor(dist_df$sor_eta[dist_df$subtype=="yes"],dist_df$dist[dist_df$subtype=="yes"],method = "spearman")
cor(dist_df$sor_eta[dist_df$subtype=="no"],dist_df$dist[dist_df$subtype=="no"],method = "spearman")
